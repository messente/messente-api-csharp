/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.Messente.Api.Client;

namespace com.Messente.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INumberVerificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// verify number
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VerifyNumber(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0);

        /// <summary>
        /// verify number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VerifyNumberWithHttpInfo(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0);
        /// <summary>
        /// verified the PIN code entered by the user.
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VerifyPin(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0);

        /// <summary>
        /// verified the PIN code entered by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VerifyPinWithHttpInfo(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INumberVerificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// verify number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VerifyNumberAsync(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// verify number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VerifyNumberWithHttpInfoAsync(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// verified the PIN code entered by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VerifyPinAsync(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// verified the PIN code entered by the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VerifyPinWithHttpInfoAsync(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INumberVerificationApi : INumberVerificationApiSync, INumberVerificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NumberVerificationApi : INumberVerificationApi
    {
        private com.Messente.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberVerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NumberVerificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberVerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NumberVerificationApi(string basePath)
        {
            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                new com.Messente.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberVerificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NumberVerificationApi(com.Messente.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberVerificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NumberVerificationApi(com.Messente.Api.Client.ISynchronousClient client, com.Messente.Api.Client.IAsynchronousClient asyncClient, com.Messente.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.Messente.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.Messente.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.Messente.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.Messente.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// verify number 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VerifyNumber(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = VerifyNumberWithHttpInfo(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie);
            return localVarResponse.Data;
        }

        /// <summary>
        /// verify number 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public com.Messente.Api.Client.ApiResponse<string> VerifyNumberWithHttpInfo(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling NumberVerificationApi->VerifyNumber");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling NumberVerificationApi->VerifyNumber");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'to' when calling NumberVerificationApi->VerifyNumber");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (template != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "template", template));
            }
            if (pinLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "pin_length", pinLength));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (maxTries != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "max_tries", maxTries));
            }
            if (retryDelay != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "retry_delay", retryDelay));
            }
            if (validity != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "validity", validity));
            }
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (browser != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "browser", browser));
            }
            if (cookie != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "cookie", cookie));
            }

            localVarRequestOptions.Operation = "NumberVerificationApi.VerifyNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/verify/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// verify number 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VerifyNumberAsync(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = await VerifyNumberWithHttpInfoAsync(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// verify number 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="to">Receiver&#39;s phone number with the country code</param>
        /// <param name="template">Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)</param>
        /// <param name="pinLength">Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)</param>
        /// <param name="from">Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)</param>
        /// <param name="maxTries">Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)</param>
        /// <param name="retryDelay">For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)</param>
        /// <param name="validity">For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)</param>
        /// <param name="ip">IP address of the client making verification request. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<string>> VerifyNumberWithHttpInfoAsync(string username, string password, string to, string? template = default(string?), string? pinLength = default(string?), string? from = default(string?), string? maxTries = default(string?), string? retryDelay = default(string?), string? validity = default(string?), string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling NumberVerificationApi->VerifyNumber");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling NumberVerificationApi->VerifyNumber");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'to' when calling NumberVerificationApi->VerifyNumber");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (template != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "template", template));
            }
            if (pinLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "pin_length", pinLength));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (maxTries != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "max_tries", maxTries));
            }
            if (retryDelay != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "retry_delay", retryDelay));
            }
            if (validity != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "validity", validity));
            }
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (browser != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "browser", browser));
            }
            if (cookie != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "cookie", cookie));
            }

            localVarRequestOptions.Operation = "NumberVerificationApi.VerifyNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/verify/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// verified the PIN code entered by the user. 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VerifyPin(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = VerifyPinWithHttpInfo(username, password, verificationId, pin, ip, browser, cookie);
            return localVarResponse.Data;
        }

        /// <summary>
        /// verified the PIN code entered by the user. 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public com.Messente.Api.Client.ApiResponse<string> VerifyPinWithHttpInfo(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'verificationId' is set
            if (verificationId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'verificationId' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'pin' is set
            if (pin == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'pin' when calling NumberVerificationApi->VerifyPin");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "verification_id", verificationId));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "pin", pin));
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (browser != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "browser", browser));
            }
            if (cookie != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "cookie", cookie));
            }

            localVarRequestOptions.Operation = "NumberVerificationApi.VerifyPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/verify/pin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// verified the PIN code entered by the user. 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VerifyPinAsync(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = await VerifyPinWithHttpInfoAsync(username, password, verificationId, pin, ip, browser, cookie, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// verified the PIN code entered by the user. 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="verificationId">Verification ID returned by the successful verification request.</param>
        /// <param name="pin">PIN code entered by the user.</param>
        /// <param name="ip">IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)</param>
        /// <param name="browser">User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)</param>
        /// <param name="cookie">Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<string>> VerifyPinWithHttpInfoAsync(string username, string password, string verificationId, string pin, string? ip = default(string?), string? browser = default(string?), string? cookie = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'verificationId' is set
            if (verificationId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'verificationId' when calling NumberVerificationApi->VerifyPin");
            }

            // verify the required parameter 'pin' is set
            if (pin == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'pin' when calling NumberVerificationApi->VerifyPin");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "verification_id", verificationId));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "pin", pin));
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (browser != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "browser", browser));
            }
            if (cookie != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "cookie", cookie));
            }

            localVarRequestOptions.Operation = "NumberVerificationApi.VerifyPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/verify/pin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
