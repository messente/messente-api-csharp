/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.Messente.Api.Client;
using com.Messente.Api.Model;

namespace com.Messente.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get pricelist for account
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetPricelist(string username, string password, int operationIndex = 0);

        /// <summary>
        /// Get pricelist for account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPricelistWithHttpInfo(string username, string password, int operationIndex = 0);
        /// <summary>
        /// Get pricing for a specific country
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Price</returns>
        Price GetPrices(string username, string password, string country, string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get pricing for a specific country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Price</returns>
        ApiResponse<Price> GetPricesWithHttpInfo(string username, string password, string country, string? format = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get pricelist for account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPricelistAsync(string username, string password, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get pricelist for account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPricelistWithHttpInfoAsync(string username, string password, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get pricing for a specific country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Price</returns>
        System.Threading.Tasks.Task<Price> GetPricesAsync(string username, string password, string country, string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get pricing for a specific country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Price)</returns>
        System.Threading.Tasks.Task<ApiResponse<Price>> GetPricesWithHttpInfoAsync(string username, string password, string country, string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApi : IPricingApiSync, IPricingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricingApi : IPricingApi
    {
        private com.Messente.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingApi(string basePath)
        {
            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                new com.Messente.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricingApi(com.Messente.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricingApi(com.Messente.Api.Client.ISynchronousClient client, com.Messente.Api.Client.IAsynchronousClient asyncClient, com.Messente.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.Messente.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.Messente.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.Messente.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.Messente.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get pricelist for account 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetPricelist(string username, string password, int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = GetPricelistWithHttpInfo(username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricelist for account 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public com.Messente.Api.Client.ApiResponse<string> GetPricelistWithHttpInfo(string username, string password, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling PricingApi->GetPricelist");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling PricingApi->GetPricelist");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));

            localVarRequestOptions.Operation = "PricingApi.GetPricelist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/pricelist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricelist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get pricelist for account 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPricelistAsync(string username, string password, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<string> localVarResponse = await GetPricelistWithHttpInfoAsync(username, password, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricelist for account 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<string>> GetPricelistWithHttpInfoAsync(string username, string password, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling PricingApi->GetPricelist");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling PricingApi->GetPricelist");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));

            localVarRequestOptions.Operation = "PricingApi.GetPricelist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/pricelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricelist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get pricing for a specific country 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Price</returns>
        public Price GetPrices(string username, string password, string country, string? format = default(string?), int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<Price> localVarResponse = GetPricesWithHttpInfo(username, password, country, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricing for a specific country 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Price</returns>
        public com.Messente.Api.Client.ApiResponse<Price> GetPricesWithHttpInfo(string username, string password, string country, string? format = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling PricingApi->GetPrices");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling PricingApi->GetPrices");
            }

            // verify the required parameter 'country' is set
            if (country == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'country' when calling PricingApi->GetPrices");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain; charset=utf-8"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "PricingApi.GetPrices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Price>("/prices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get pricing for a specific country 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Price</returns>
        public async System.Threading.Tasks.Task<Price> GetPricesAsync(string username, string password, string country, string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<Price> localVarResponse = await GetPricesWithHttpInfoAsync(username, password, country, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricing for a specific country 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The API username</param>
        /// <param name="password">The API password</param>
        /// <param name="country">The country code, for which to get the prices</param>
        /// <param name="format">The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Price)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<Price>> GetPricesWithHttpInfoAsync(string username, string password, string country, string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'username' when calling PricingApi->GetPrices");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'password' when calling PricingApi->GetPrices");
            }

            // verify the required parameter 'country' is set
            if (country == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'country' when calling PricingApi->GetPrices");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain; charset=utf-8"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "PricingApi.GetPrices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiPassword) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("password")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "password", this.Configuration.GetApiKeyWithPrefix("password")));
            }
            // authentication (apiUsername) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("username")))
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "username", this.Configuration.GetApiKeyWithPrefix("username")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Price>("/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
