/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.Messente.Api.Client;
using com.Messente.Api.Model;

namespace com.Messente.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsAppTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a WhatsApp template
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappCreateTemplateResponse</returns>
        WhatsappCreateTemplateResponse CreateWhatsappTemplate(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappCreateTemplateResponse</returns>
        ApiResponse<WhatsappCreateTemplateResponse> CreateWhatsappTemplateWithHttpInfo(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a WhatsApp template
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteWhatsappTemplate(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWhatsappTemplateWithHttpInfo(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Requests a WhatsApp template with the given ID
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappTemplateResponse</returns>
        WhatsappTemplateResponse GetWhatsappTemplateById(string wabaId, string templateId, int operationIndex = 0);

        /// <summary>
        /// Requests a WhatsApp template with the given ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappTemplateResponse</returns>
        ApiResponse<WhatsappTemplateResponse> GetWhatsappTemplateByIdWithHttpInfo(string wabaId, string templateId, int operationIndex = 0);
        /// <summary>
        /// Requests a list of WhatsApp templates
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappListTemplatesResponse</returns>
        WhatsappListTemplatesResponse ListWhatsappTemplates(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0);

        /// <summary>
        /// Requests a list of WhatsApp templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappListTemplatesResponse</returns>
        ApiResponse<WhatsappListTemplatesResponse> ListWhatsappTemplatesWithHttpInfo(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0);
        /// <summary>
        /// Updates a WhatsApp template
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UpdateWhatsappTemplate(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Updates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWhatsappTemplateWithHttpInfo(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsAppTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappCreateTemplateResponse</returns>
        System.Threading.Tasks.Task<WhatsappCreateTemplateResponse> CreateWhatsappTemplateAsync(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappCreateTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WhatsappCreateTemplateResponse>> CreateWhatsappTemplateWithHttpInfoAsync(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteWhatsappTemplateAsync(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWhatsappTemplateWithHttpInfoAsync(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Requests a WhatsApp template with the given ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappTemplateResponse</returns>
        System.Threading.Tasks.Task<WhatsappTemplateResponse> GetWhatsappTemplateByIdAsync(string wabaId, string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Requests a WhatsApp template with the given ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WhatsappTemplateResponse>> GetWhatsappTemplateByIdWithHttpInfoAsync(string wabaId, string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Requests a list of WhatsApp templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappListTemplatesResponse</returns>
        System.Threading.Tasks.Task<WhatsappListTemplatesResponse> ListWhatsappTemplatesAsync(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Requests a list of WhatsApp templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappListTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WhatsappListTemplatesResponse>> ListWhatsappTemplatesWithHttpInfoAsync(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateWhatsappTemplateAsync(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates a WhatsApp template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWhatsappTemplateWithHttpInfoAsync(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsAppTemplatesApi : IWhatsAppTemplatesApiSync, IWhatsAppTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WhatsAppTemplatesApi : IWhatsAppTemplatesApi
    {
        private com.Messente.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WhatsAppTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WhatsAppTemplatesApi(string basePath)
        {
            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                new com.Messente.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WhatsAppTemplatesApi(com.Messente.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.Messente.Api.Client.Configuration.MergeConfigurations(
                com.Messente.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.Messente.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WhatsAppTemplatesApi(com.Messente.Api.Client.ISynchronousClient client, com.Messente.Api.Client.IAsynchronousClient asyncClient, com.Messente.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.Messente.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.Messente.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.Messente.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.Messente.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.Messente.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappCreateTemplateResponse</returns>
        public WhatsappCreateTemplateResponse CreateWhatsappTemplate(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<WhatsappCreateTemplateResponse> localVarResponse = CreateWhatsappTemplateWithHttpInfo(wabaId, whatsappCreateTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappCreateTemplateResponse</returns>
        public com.Messente.Api.Client.ApiResponse<WhatsappCreateTemplateResponse> CreateWhatsappTemplateWithHttpInfo(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->CreateWhatsappTemplate");
            }

            // verify the required parameter 'whatsappCreateTemplateRequest' is set
            if (whatsappCreateTemplateRequest == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'whatsappCreateTemplateRequest' when calling WhatsAppTemplatesApi->CreateWhatsappTemplate");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.Data = whatsappCreateTemplateRequest;

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.CreateWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WhatsappCreateTemplateResponse>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappCreateTemplateResponse</returns>
        public async System.Threading.Tasks.Task<WhatsappCreateTemplateResponse> CreateWhatsappTemplateAsync(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<WhatsappCreateTemplateResponse> localVarResponse = await CreateWhatsappTemplateWithHttpInfoAsync(wabaId, whatsappCreateTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="whatsappCreateTemplateRequest">The WhatsApp template to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappCreateTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<WhatsappCreateTemplateResponse>> CreateWhatsappTemplateWithHttpInfoAsync(string wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->CreateWhatsappTemplate");
            }

            // verify the required parameter 'whatsappCreateTemplateRequest' is set
            if (whatsappCreateTemplateRequest == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'whatsappCreateTemplateRequest' when calling WhatsAppTemplatesApi->CreateWhatsappTemplate");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.Data = whatsappCreateTemplateRequest;

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.CreateWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WhatsappCreateTemplateResponse>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteWhatsappTemplate(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<Object> localVarResponse = DeleteWhatsappTemplateWithHttpInfo(wabaId, name, hsmId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public com.Messente.Api.Client.ApiResponse<Object> DeleteWhatsappTemplateWithHttpInfo(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->DeleteWhatsappTemplate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'name' when calling WhatsAppTemplatesApi->DeleteWhatsappTemplate");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (hsmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "hsmId", hsmId));
            }

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.DeleteWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteWhatsappTemplateAsync(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<Object> localVarResponse = await DeleteWhatsappTemplateWithHttpInfoAsync(wabaId, name, hsmId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="name">The name of the template to delete</param>
        /// <param name="hsmId">The ID of the template to delete (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<Object>> DeleteWhatsappTemplateWithHttpInfoAsync(string wabaId, string name, string? hsmId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->DeleteWhatsappTemplate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'name' when calling WhatsAppTemplatesApi->DeleteWhatsappTemplate");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (hsmId != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "hsmId", hsmId));
            }

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.DeleteWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a WhatsApp template with the given ID 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappTemplateResponse</returns>
        public WhatsappTemplateResponse GetWhatsappTemplateById(string wabaId, string templateId, int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<WhatsappTemplateResponse> localVarResponse = GetWhatsappTemplateByIdWithHttpInfo(wabaId, templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a WhatsApp template with the given ID 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappTemplateResponse</returns>
        public com.Messente.Api.Client.ApiResponse<WhatsappTemplateResponse> GetWhatsappTemplateByIdWithHttpInfo(string wabaId, string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->GetWhatsappTemplateById");
            }

            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'templateId' when calling WhatsAppTemplatesApi->GetWhatsappTemplateById");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", com.Messente.Api.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.GetWhatsappTemplateById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WhatsappTemplateResponse>("/whatsapp/wabas/{wabaId}/templates/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWhatsappTemplateById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a WhatsApp template with the given ID 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappTemplateResponse</returns>
        public async System.Threading.Tasks.Task<WhatsappTemplateResponse> GetWhatsappTemplateByIdAsync(string wabaId, string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<WhatsappTemplateResponse> localVarResponse = await GetWhatsappTemplateByIdWithHttpInfoAsync(wabaId, templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a WhatsApp template with the given ID 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<WhatsappTemplateResponse>> GetWhatsappTemplateByIdWithHttpInfoAsync(string wabaId, string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->GetWhatsappTemplateById");
            }

            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'templateId' when calling WhatsAppTemplatesApi->GetWhatsappTemplateById");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", com.Messente.Api.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.GetWhatsappTemplateById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WhatsappTemplateResponse>("/whatsapp/wabas/{wabaId}/templates/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWhatsappTemplateById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a list of WhatsApp templates 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsappListTemplatesResponse</returns>
        public WhatsappListTemplatesResponse ListWhatsappTemplates(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<WhatsappListTemplatesResponse> localVarResponse = ListWhatsappTemplatesWithHttpInfo(wabaId, limit, before, after, category, content, language, name, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a list of WhatsApp templates 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsappListTemplatesResponse</returns>
        public com.Messente.Api.Client.ApiResponse<WhatsappListTemplatesResponse> ListWhatsappTemplatesWithHttpInfo(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0)
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->ListWhatsappTemplates");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.ListWhatsappTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WhatsappListTemplatesResponse>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWhatsappTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a list of WhatsApp templates 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsappListTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<WhatsappListTemplatesResponse> ListWhatsappTemplatesAsync(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<WhatsappListTemplatesResponse> localVarResponse = await ListWhatsappTemplatesWithHttpInfoAsync(wabaId, limit, before, after, category, content, language, name, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a list of WhatsApp templates 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="limit">The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)</param>
        /// <param name="before">A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)</param>
        /// <param name="after">A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)</param>
        /// <param name="category">A filter for returning only templates matching a specific category. (optional)</param>
        /// <param name="content">A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="language">A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)</param>
        /// <param name="name">A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)</param>
        /// <param name="status">A filter for returning only templates matching a specific status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsappListTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<WhatsappListTemplatesResponse>> ListWhatsappTemplatesWithHttpInfoAsync(string wabaId, int? limit = default(int?), string? before = default(string?), string? after = default(string?), WhatsappTemplateCategory? category = default(WhatsappTemplateCategory?), string? content = default(string?), string? language = default(string?), string? name = default(string?), WhatsappTemplateStatus? status = default(WhatsappTemplateStatus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->ListWhatsappTemplates");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.Messente.Api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.ListWhatsappTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WhatsappListTemplatesResponse>("/whatsapp/wabas/{wabaId}/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWhatsappTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UpdateWhatsappTemplate(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0)
        {
            com.Messente.Api.Client.ApiResponse<Object> localVarResponse = UpdateWhatsappTemplateWithHttpInfo(wabaId, templateId, whatsappUpdateTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public com.Messente.Api.Client.ApiResponse<Object> UpdateWhatsappTemplateWithHttpInfo(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }

            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'templateId' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }

            // verify the required parameter 'whatsappUpdateTemplateRequest' is set
            if (whatsappUpdateTemplateRequest == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'whatsappUpdateTemplateRequest' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }

            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", com.Messente.Api.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = whatsappUpdateTemplateRequest;

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.UpdateWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/whatsapp/wabas/{wabaId}/templates/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateWhatsappTemplateAsync(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            com.Messente.Api.Client.ApiResponse<Object> localVarResponse = await UpdateWhatsappTemplateWithHttpInfoAsync(wabaId, templateId, whatsappUpdateTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a WhatsApp template 
        /// </summary>
        /// <exception cref="com.Messente.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wabaId">The ID of the WABA</param>
        /// <param name="templateId">The ID of the template to update</param>
        /// <param name="whatsappUpdateTemplateRequest">The template data to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<com.Messente.Api.Client.ApiResponse<Object>> UpdateWhatsappTemplateWithHttpInfoAsync(string wabaId, string templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'wabaId' is set
            if (wabaId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'wabaId' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }

            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'templateId' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }

            // verify the required parameter 'whatsappUpdateTemplateRequest' is set
            if (whatsappUpdateTemplateRequest == null)
            {
                throw new com.Messente.Api.Client.ApiException(400, "Missing required parameter 'whatsappUpdateTemplateRequest' when calling WhatsAppTemplatesApi->UpdateWhatsappTemplate");
            }


            com.Messente.Api.Client.RequestOptions localVarRequestOptions = new com.Messente.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.Messente.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.Messente.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wabaId", com.Messente.Api.Client.ClientUtils.ParameterToString(wabaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateId", com.Messente.Api.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = whatsappUpdateTemplateRequest;

            localVarRequestOptions.Operation = "WhatsAppTemplatesApi.UpdateWhatsappTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + com.Messente.Api.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/whatsapp/wabas/{wabaId}/templates/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWhatsappTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
