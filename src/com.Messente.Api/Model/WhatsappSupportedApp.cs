/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Supported app for the button
    /// </summary>
    [DataContract(Name = "WhatsappSupportedApp")]
    public partial class WhatsappSupportedApp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappSupportedApp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhatsappSupportedApp()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappSupportedApp" /> class.
        /// </summary>
        /// <param name="packageName">Package name (required).</param>
        /// <param name="signatureHash">Signature hash (required).</param>
        public WhatsappSupportedApp(string packageName = default(string), string signatureHash = default(string))
        {
            // to ensure "packageName" is required (not null)
            if (packageName == null)
            {
                throw new ArgumentNullException("packageName is a required property for WhatsappSupportedApp and cannot be null");
            }
            this.PackageName = packageName;
            // to ensure "signatureHash" is required (not null)
            if (signatureHash == null)
            {
                throw new ArgumentNullException("signatureHash is a required property for WhatsappSupportedApp and cannot be null");
            }
            this.SignatureHash = signatureHash;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Package name
        /// </summary>
        /// <value>Package name</value>
        [DataMember(Name = "package_name", IsRequired = true, EmitDefaultValue = true)]
        public string PackageName { get; set; }

        /// <summary>
        /// Signature hash
        /// </summary>
        /// <value>Signature hash</value>
        [DataMember(Name = "signature_hash", IsRequired = true, EmitDefaultValue = true)]
        public string SignatureHash { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsappSupportedApp {\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  SignatureHash: ").Append(SignatureHash).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
