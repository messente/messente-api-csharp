/* 
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Report for one country
    /// </summary>
    [DataContract]
    public partial class StatisticsReport :  IEquatable<StatisticsReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsReport" /> class.
        /// </summary>
        /// <param name="totalMessages">Sum of all messages (required).</param>
        /// <param name="totalPrice">Price for all messages (required).</param>
        /// <param name="country">Target country of all messages (required).</param>
        public StatisticsReport(int? totalMessages = default(int?), string totalPrice = default(string), string country = default(string))
        {
            // to ensure "totalMessages" is required (not null)
            if (totalMessages == null)
            {
                throw new InvalidDataException("totalMessages is a required property for StatisticsReport and cannot be null");
            }
            else
            {
                this.TotalMessages = totalMessages;
            }
            // to ensure "totalPrice" is required (not null)
            if (totalPrice == null)
            {
                throw new InvalidDataException("totalPrice is a required property for StatisticsReport and cannot be null");
            }
            else
            {
                this.TotalPrice = totalPrice;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for StatisticsReport and cannot be null");
            }
            else
            {
                this.Country = country;
            }
        }
        
        /// <summary>
        /// Sum of all messages
        /// </summary>
        /// <value>Sum of all messages</value>
        [DataMember(Name="total_messages", EmitDefaultValue=false)]
        public int? TotalMessages { get; set; }

        /// <summary>
        /// Price for all messages
        /// </summary>
        /// <value>Price for all messages</value>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public string TotalPrice { get; set; }

        /// <summary>
        /// Target country of all messages
        /// </summary>
        /// <value>Target country of all messages</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatisticsReport {\n");
            sb.Append("  TotalMessages: ").Append(TotalMessages).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsReport);
        }

        /// <summary>
        /// Returns true if StatisticsReport instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalMessages == input.TotalMessages ||
                    (this.TotalMessages != null &&
                    this.TotalMessages.Equals(input.TotalMessages))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalMessages != null)
                    hashCode = hashCode * 59 + this.TotalMessages.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }
    }

}
