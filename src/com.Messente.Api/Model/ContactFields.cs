/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// A container for fields of a request body of a contact
    /// </summary>
    [DataContract(Name = "ContactFields")]
    public partial class ContactFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactFields()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactFields" /> class.
        /// </summary>
        /// <param name="phoneNumber">Phone number in e.164 format (required).</param>
        /// <param name="email">The email of the contact.</param>
        /// <param name="firstName">The first name of the contact.</param>
        /// <param name="lastName">The last name of the contact.</param>
        /// <param name="company">The company of the contact.</param>
        /// <param name="title">The title of the contact.</param>
        /// <param name="custom">The first custom field.</param>
        /// <param name="custom2">The second custom field.</param>
        /// <param name="custom3">The third custom field.</param>
        /// <param name="custom4">The fourth custom field.</param>
        public ContactFields(string phoneNumber = default(string), string email = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string title = default(string), string custom = default(string), string custom2 = default(string), string custom3 = default(string), string custom4 = default(string))
        {
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for ContactFields and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Company = company;
            this.Title = title;
            this.Custom = custom;
            this.Custom2 = custom2;
            this.Custom3 = custom3;
            this.Custom4 = custom4;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Phone number in e.164 format
        /// </summary>
        /// <value>Phone number in e.164 format</value>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The email of the contact
        /// </summary>
        /// <value>The email of the contact</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the contact
        /// </summary>
        /// <value>The first name of the contact</value>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the contact
        /// </summary>
        /// <value>The last name of the contact</value>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// The company of the contact
        /// </summary>
        /// <value>The company of the contact</value>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public string Company { get; set; }

        /// <summary>
        /// The title of the contact
        /// </summary>
        /// <value>The title of the contact</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The first custom field
        /// </summary>
        /// <value>The first custom field</value>
        [DataMember(Name = "custom", EmitDefaultValue = true)]
        public string Custom { get; set; }

        /// <summary>
        /// The second custom field
        /// </summary>
        /// <value>The second custom field</value>
        [DataMember(Name = "custom2", EmitDefaultValue = true)]
        public string Custom2 { get; set; }

        /// <summary>
        /// The third custom field
        /// </summary>
        /// <value>The third custom field</value>
        [DataMember(Name = "custom3", EmitDefaultValue = true)]
        public string Custom3 { get; set; }

        /// <summary>
        /// The fourth custom field
        /// </summary>
        /// <value>The fourth custom field</value>
        [DataMember(Name = "custom4", EmitDefaultValue = true)]
        public string Custom4 { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactFields {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Custom2: ").Append(Custom2).Append("\n");
            sb.Append("  Custom3: ").Append(Custom3).Append("\n");
            sb.Append("  Custom4: ").Append(Custom4).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
