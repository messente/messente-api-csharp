/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// An omnimessage
    /// </summary>
    [DataContract(Name = "Omnimessage")]
    public partial class Omnimessage : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TextStore
        /// </summary>
        [DataMember(Name = "text_store", EmitDefaultValue = false)]
        public TextStore? TextStore { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public Priority? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Omnimessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Omnimessage()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Omnimessage" /> class.
        /// </summary>
        /// <param name="to">Phone number in e.164 format (required).</param>
        /// <param name="messages">An array of messages (required).</param>
        /// <param name="dlrUrl">URL where the delivery report will be sent.</param>
        /// <param name="textStore">textStore.</param>
        /// <param name="timeToSend">Optional parameter for sending messages at some specific time in the future.   Time must be specified in the ISO-8601 format.   If no timezone is specified, then the timezone is assumed to be UTC    Examples:    * Time specified with timezone: 2018-06-22T09:05:07+00:00 Time specified in UTC: 2018-06-22T09:05:07Z   * Time specified without timezone: 2018-06-22T09:05 (equivalent to 2018-06-22T09:05+00:00).</param>
        /// <param name="priority">priority.</param>
        public Omnimessage(string to = default(string), List<OmnimessageMessagesInner> messages = default(List<OmnimessageMessagesInner>), string dlrUrl = default(string), TextStore? textStore = default(TextStore?), DateTime timeToSend = default(DateTime), Priority? priority = default(Priority?))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for Omnimessage and cannot be null");
            }
            this.To = to;
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for Omnimessage and cannot be null");
            }
            this.Messages = messages;
            this.DlrUrl = dlrUrl;
            this.TextStore = textStore;
            this.TimeToSend = timeToSend;
            this.Priority = priority;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Phone number in e.164 format
        /// </summary>
        /// <value>Phone number in e.164 format</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// An array of messages
        /// </summary>
        /// <value>An array of messages</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<OmnimessageMessagesInner> Messages { get; set; }

        /// <summary>
        /// URL where the delivery report will be sent
        /// </summary>
        /// <value>URL where the delivery report will be sent</value>
        [DataMember(Name = "dlr_url", EmitDefaultValue = false)]
        public string DlrUrl { get; set; }

        /// <summary>
        /// Optional parameter for sending messages at some specific time in the future.   Time must be specified in the ISO-8601 format.   If no timezone is specified, then the timezone is assumed to be UTC    Examples:    * Time specified with timezone: 2018-06-22T09:05:07+00:00 Time specified in UTC: 2018-06-22T09:05:07Z   * Time specified without timezone: 2018-06-22T09:05 (equivalent to 2018-06-22T09:05+00:00)
        /// </summary>
        /// <value>Optional parameter for sending messages at some specific time in the future.   Time must be specified in the ISO-8601 format.   If no timezone is specified, then the timezone is assumed to be UTC    Examples:    * Time specified with timezone: 2018-06-22T09:05:07+00:00 Time specified in UTC: 2018-06-22T09:05:07Z   * Time specified without timezone: 2018-06-22T09:05 (equivalent to 2018-06-22T09:05+00:00)</value>
        [DataMember(Name = "time_to_send", EmitDefaultValue = false)]
        public DateTime TimeToSend { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Omnimessage {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  DlrUrl: ").Append(DlrUrl).Append("\n");
            sb.Append("  TextStore: ").Append(TextStore).Append("\n");
            sb.Append("  TimeToSend: ").Append(TimeToSend).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
