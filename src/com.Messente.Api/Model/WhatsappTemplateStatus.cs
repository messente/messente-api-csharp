/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Template status
    /// </summary>
    /// <value>Template status</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WhatsappTemplateStatus
    {
        /// <summary>
        /// Enum Approved for value: approved
        /// </summary>
        [EnumMember(Value = "approved")]
        Approved = 1,

        /// <summary>
        /// Enum InAppeal for value: in_appeal
        /// </summary>
        [EnumMember(Value = "in_appeal")]
        InAppeal = 2,

        /// <summary>
        /// Enum Rejected for value: rejected
        /// </summary>
        [EnumMember(Value = "rejected")]
        Rejected = 3,

        /// <summary>
        /// Enum Pending for value: pending
        /// </summary>
        [EnumMember(Value = "pending")]
        Pending = 4,

        /// <summary>
        /// Enum PendingDeletion for value: pending_deletion
        /// </summary>
        [EnumMember(Value = "pending_deletion")]
        PendingDeletion = 5,

        /// <summary>
        /// Enum Deleted for value: deleted
        /// </summary>
        [EnumMember(Value = "deleted")]
        Deleted = 6,

        /// <summary>
        /// Enum Disabled for value: disabled
        /// </summary>
        [EnumMember(Value = "disabled")]
        Disabled = 7,

        /// <summary>
        /// Enum Paused for value: paused
        /// </summary>
        [EnumMember(Value = "paused")]
        Paused = 8,

        /// <summary>
        /// Enum LimitExceeded for value: limit_exceeded
        /// </summary>
        [EnumMember(Value = "limit_exceeded")]
        LimitExceeded = 9
    }

}
