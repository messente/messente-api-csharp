/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// A container for successful delivery report response
    /// </summary>
    [DataContract(Name = "DeliveryReportResponse")]
    public partial class DeliveryReportResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryReportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReportResponse" /> class.
        /// </summary>
        /// <param name="statuses">Contains the delivery reports for each channel, ordered by send order (required).</param>
        /// <param name="to">Phone number in e.164 format (required).</param>
        /// <param name="omnimessageId">Unique identifier for the omnimessage (required).</param>
        public DeliveryReportResponse(List<DeliveryResult> statuses = default(List<DeliveryResult>), string to = default(string), Guid omnimessageId = default(Guid))
        {
            // to ensure "statuses" is required (not null)
            if (statuses == null)
            {
                throw new ArgumentNullException("statuses is a required property for DeliveryReportResponse and cannot be null");
            }
            this.Statuses = statuses;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for DeliveryReportResponse and cannot be null");
            }
            this.To = to;
            this.OmnimessageId = omnimessageId;
        }

        /// <summary>
        /// Contains the delivery reports for each channel, ordered by send order
        /// </summary>
        /// <value>Contains the delivery reports for each channel, ordered by send order</value>
        [DataMember(Name = "statuses", IsRequired = true, EmitDefaultValue = true)]
        public List<DeliveryResult> Statuses { get; set; }

        /// <summary>
        /// Phone number in e.164 format
        /// </summary>
        /// <value>Phone number in e.164 format</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Unique identifier for the omnimessage
        /// </summary>
        /// <value>Unique identifier for the omnimessage</value>
        [DataMember(Name = "omnimessage_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OmnimessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryReportResponse {\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  OmnimessageId: ").Append(OmnimessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
