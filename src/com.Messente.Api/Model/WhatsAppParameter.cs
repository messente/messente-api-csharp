/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber and WhatsApp messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Whatsapp component parameter.
    /// </summary>
    [DataContract(Name = "WhatsAppParameter")]
    public partial class WhatsAppParameter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhatsAppParameter()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppParameter" /> class.
        /// </summary>
        /// <param name="type">Type of the parameter. (required).</param>
        /// <param name="text">A text..</param>
        /// <param name="currency">currency.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="image">image.</param>
        /// <param name="document">document.</param>
        /// <param name="video">video.</param>
        /// <param name="couponCode">A coupon code..</param>
        /// <param name="payload">A payload..</param>
        public WhatsAppParameter(string type = default(string), string text = default(string), WhatsAppCurrency currency = default(WhatsAppCurrency), WhatsAppDatetime dateTime = default(WhatsAppDatetime), WhatsAppMedia image = default(WhatsAppMedia), WhatsAppMedia document = default(WhatsAppMedia), WhatsAppMedia video = default(WhatsAppMedia), string couponCode = default(string), string payload = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for WhatsAppParameter and cannot be null");
            }
            this.Type = type;
            this.Text = text;
            this.Currency = currency;
            this.DateTime = dateTime;
            this.Image = image;
            this.Document = document;
            this.Video = video;
            this.CouponCode = couponCode;
            this.Payload = payload;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Type of the parameter.
        /// </summary>
        /// <value>Type of the parameter.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// A text.
        /// </summary>
        /// <value>A text.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public WhatsAppCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "date_time", EmitDefaultValue = false)]
        public WhatsAppDatetime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public WhatsAppMedia Image { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public WhatsAppMedia Document { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name = "video", EmitDefaultValue = false)]
        public WhatsAppMedia Video { get; set; }

        /// <summary>
        /// A coupon code.
        /// </summary>
        /// <value>A coupon code.</value>
        [DataMember(Name = "coupon_code", EmitDefaultValue = false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// A payload.
        /// </summary>
        /// <value>A payload.</value>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsAppParameter {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
