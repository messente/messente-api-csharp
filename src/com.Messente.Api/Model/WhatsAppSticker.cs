/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber and WhatsApp messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// WhatsApp sticker content. Either \&quot;id\&quot; or \&quot;link\&quot; must be provided, but not both.
    /// </summary>
    [DataContract(Name = "WhatsAppSticker")]
    public partial class WhatsAppSticker : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppSticker" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the sticker file..</param>
        /// <param name="mimeType">MIME type of the sticker file..</param>
        /// <param name="animated">Indicates whether the sticker is animated..</param>
        /// <param name="link">URL link to the sticker file..</param>
        public WhatsAppSticker(string id = default(string), string mimeType = default(string), bool? animated = default(bool?), string link = default(string))
        {
            this.Id = id;
            this.MimeType = mimeType;
            this.Animated = animated;
            this.Link = link;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the sticker file.
        /// </summary>
        /// <value>Unique identifier for the sticker file.</value>
        /*
        <example>54321</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// MIME type of the sticker file.
        /// </summary>
        /// <value>MIME type of the sticker file.</value>
        /*
        <example>image/webp</example>
        */
        [DataMember(Name = "mime_type", EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Indicates whether the sticker is animated.
        /// </summary>
        /// <value>Indicates whether the sticker is animated.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "animated", EmitDefaultValue = true)]
        public bool? Animated { get; set; }

        /// <summary>
        /// URL link to the sticker file.
        /// </summary>
        /// <value>URL link to the sticker file.</value>
        /*
        <example>https://example.com/sticker.webp</example>
        */
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsAppSticker {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Animated: ").Append(Animated).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
