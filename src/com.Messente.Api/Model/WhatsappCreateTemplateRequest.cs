/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Request to create a WhatsApp template
    /// </summary>
    [DataContract(Name = "WhatsappCreateTemplateRequest")]
    public partial class WhatsappCreateTemplateRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public WhatsappTemplateCategory Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCreateTemplateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhatsappCreateTemplateRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCreateTemplateRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the template (required).</param>
        /// <param name="category">category (required).</param>
        /// <param name="allowCategoryChange">Allow category change (default to false).</param>
        /// <param name="language">Language of the template (required).</param>
        /// <param name="components">List of template components (required).</param>
        public WhatsappCreateTemplateRequest(string name = default(string), WhatsappTemplateCategory category = default(WhatsappTemplateCategory), bool allowCategoryChange = false, string language = default(string), List<WhatsappTemplateComponent> components = default(List<WhatsappTemplateComponent>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WhatsappCreateTemplateRequest and cannot be null");
            }
            this.Name = name;
            this.Category = category;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for WhatsappCreateTemplateRequest and cannot be null");
            }
            this.Language = language;
            // to ensure "components" is required (not null)
            if (components == null)
            {
                throw new ArgumentNullException("components is a required property for WhatsappCreateTemplateRequest and cannot be null");
            }
            this.Components = components;
            this.AllowCategoryChange = allowCategoryChange;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Name of the template
        /// </summary>
        /// <value>Name of the template</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Allow category change
        /// </summary>
        /// <value>Allow category change</value>
        [DataMember(Name = "allow_category_change", EmitDefaultValue = true)]
        public bool AllowCategoryChange { get; set; }

        /// <summary>
        /// Language of the template
        /// </summary>
        /// <value>Language of the template</value>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// List of template components
        /// </summary>
        /// <value>List of template components</value>
        [DataMember(Name = "components", IsRequired = true, EmitDefaultValue = true)]
        public List<WhatsappTemplateComponent> Components { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsappCreateTemplateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AllowCategoryChange: ").Append(AllowCategoryChange).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
