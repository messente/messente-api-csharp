/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Whatsapp button object.
    /// </summary>
    [DataContract(Name = "WhatsappTemplateButton")]
    public partial class WhatsappTemplateButton : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public WhatsappButtonType? Type { get; set; }

        /// <summary>
        /// Gets or Sets OtpType
        /// </summary>
        [DataMember(Name = "otp_type", EmitDefaultValue = false)]
        public WhatsappOtpButtonType? OtpType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappTemplateButton" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="otpType">otpType.</param>
        /// <param name="autofillText">Text to be autofilled in the OTP field.</param>
        /// <param name="supportedApps">List of supported apps for the button.</param>
        /// <param name="text">Text content of the button.</param>
        /// <param name="phoneNumber">Phone number for the button.</param>
        /// <param name="url">URL for the button.</param>
        public WhatsappTemplateButton(WhatsappButtonType? type = default(WhatsappButtonType?), WhatsappOtpButtonType? otpType = default(WhatsappOtpButtonType?), string autofillText = default(string), List<WhatsappSupportedApp> supportedApps = default(List<WhatsappSupportedApp>), string text = default(string), string phoneNumber = default(string), string url = default(string))
        {
            this.Type = type;
            this.OtpType = otpType;
            this.AutofillText = autofillText;
            this.SupportedApps = supportedApps;
            this.Text = text;
            this.PhoneNumber = phoneNumber;
            this.Url = url;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Text to be autofilled in the OTP field
        /// </summary>
        /// <value>Text to be autofilled in the OTP field</value>
        [DataMember(Name = "autofill_text", EmitDefaultValue = false)]
        public string AutofillText { get; set; }

        /// <summary>
        /// List of supported apps for the button
        /// </summary>
        /// <value>List of supported apps for the button</value>
        [DataMember(Name = "supported_apps", EmitDefaultValue = false)]
        public List<WhatsappSupportedApp> SupportedApps { get; set; }

        /// <summary>
        /// Text content of the button
        /// </summary>
        /// <value>Text content of the button</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Phone number for the button
        /// </summary>
        /// <value>Phone number for the button</value>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// URL for the button
        /// </summary>
        /// <value>URL for the button</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsappTemplateButton {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OtpType: ").Append(OtpType).Append("\n");
            sb.Append("  AutofillText: ").Append(AutofillText).Append("\n");
            sb.Append("  SupportedApps: ").Append(SupportedApps).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 25)
            {
                yield return new ValidationResult("Invalid value for Text, length must be less than 25.", new [] { "Text" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Url, length must be less than 2000.", new [] { "Url" });
            }

            yield break;
        }
    }

}
