/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Whatsapp currency object.
    /// </summary>
    [DataContract(Name = "WhatsAppCurrency")]
    public partial class WhatsAppCurrency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppCurrency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhatsAppCurrency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppCurrency" /> class.
        /// </summary>
        /// <param name="fallbackValue">Default text if localization fails. (required).</param>
        /// <param name="code">Currency code as defined in ISO 4217. (required).</param>
        /// <param name="amount1000">Amount multiplied by 1000. (required).</param>
        public WhatsAppCurrency(string fallbackValue = default(string), string code = default(string), string amount1000 = default(string))
        {
            // to ensure "fallbackValue" is required (not null)
            if (fallbackValue == null)
            {
                throw new ArgumentNullException("fallbackValue is a required property for WhatsAppCurrency and cannot be null");
            }
            this.FallbackValue = fallbackValue;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for WhatsAppCurrency and cannot be null");
            }
            this.Code = code;
            // to ensure "amount1000" is required (not null)
            if (amount1000 == null)
            {
                throw new ArgumentNullException("amount1000 is a required property for WhatsAppCurrency and cannot be null");
            }
            this.Amount1000 = amount1000;
        }

        /// <summary>
        /// Default text if localization fails.
        /// </summary>
        /// <value>Default text if localization fails.</value>
        [DataMember(Name = "fallback_value", IsRequired = true, EmitDefaultValue = true)]
        public string FallbackValue { get; set; }

        /// <summary>
        /// Currency code as defined in ISO 4217.
        /// </summary>
        /// <value>Currency code as defined in ISO 4217.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Amount multiplied by 1000.
        /// </summary>
        /// <value>Amount multiplied by 1000.</value>
        [DataMember(Name = "amount_1000", IsRequired = true, EmitDefaultValue = true)]
        public string Amount1000 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsAppCurrency {\n");
            sb.Append("  FallbackValue: ").Append(FallbackValue).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Amount1000: ").Append(Amount1000).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
