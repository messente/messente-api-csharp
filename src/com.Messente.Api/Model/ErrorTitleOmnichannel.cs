/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// Textual value which corresponds to an error code
    /// </summary>
    /// <value>Textual value which corresponds to an error code</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ErrorTitleOmnichannel
    {
        /// <summary>
        /// Enum NotFound for value: Not found
        /// </summary>
        [EnumMember(Value = "Not found")]
        NotFound = 1,

        /// <summary>
        /// Enum Forbidden for value: Forbidden
        /// </summary>
        [EnumMember(Value = "Forbidden")]
        Forbidden = 2,

        /// <summary>
        /// Enum Unauthorized for value: Unauthorized
        /// </summary>
        [EnumMember(Value = "Unauthorized")]
        Unauthorized = 3,

        /// <summary>
        /// Enum InvalidData for value: Invalid data
        /// </summary>
        [EnumMember(Value = "Invalid data")]
        InvalidData = 4,

        /// <summary>
        /// Enum InternalServerError for value: Internal Server Error
        /// </summary>
        [EnumMember(Value = "Internal Server Error")]
        InternalServerError = 5,

        /// <summary>
        /// Enum MissingData for value: Missing data
        /// </summary>
        [EnumMember(Value = "Missing data")]
        MissingData = 6,

        /// <summary>
        /// Enum MethodNotAllowed for value: Method not allowed
        /// </summary>
        [EnumMember(Value = "Method not allowed")]
        MethodNotAllowed = 7
    }

}
