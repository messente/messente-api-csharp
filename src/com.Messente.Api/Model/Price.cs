/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber and WhatsApp messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// An object containing the pricing information for a given country
    /// </summary>
    [DataContract(Name = "Price")]
    public partial class Price : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Price()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        /// <param name="country">The alpha-2 code for the country (required).</param>
        /// <param name="name">The name of the country (required).</param>
        /// <param name="prefix">The country code prefix (required).</param>
        /// <param name="networks">A list of networks available in the country (required).</param>
        public Price(string country = default(string), string name = default(string), string prefix = default(string), List<PriceNetworksInner> networks = default(List<PriceNetworksInner>))
        {
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for Price and cannot be null");
            }
            this.Country = country;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Price and cannot be null");
            }
            this.Name = name;
            // to ensure "prefix" is required (not null)
            if (prefix == null)
            {
                throw new ArgumentNullException("prefix is a required property for Price and cannot be null");
            }
            this.Prefix = prefix;
            // to ensure "networks" is required (not null)
            if (networks == null)
            {
                throw new ArgumentNullException("networks is a required property for Price and cannot be null");
            }
            this.Networks = networks;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The alpha-2 code for the country
        /// </summary>
        /// <value>The alpha-2 code for the country</value>
        /*
        <example>EE</example>
        */
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The name of the country
        /// </summary>
        /// <value>The name of the country</value>
        /*
        <example>Estonia</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The country code prefix
        /// </summary>
        /// <value>The country code prefix</value>
        /*
        <example>372</example>
        */
        [DataMember(Name = "prefix", IsRequired = true, EmitDefaultValue = true)]
        public string Prefix { get; set; }

        /// <summary>
        /// A list of networks available in the country
        /// </summary>
        /// <value>A list of networks available in the country</value>
        [DataMember(Name = "networks", IsRequired = true, EmitDefaultValue = true)]
        public List<PriceNetworksInner> Networks { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
