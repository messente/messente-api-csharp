/*
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Api.Client.OpenAPIDateConverter;

namespace com.Messente.Api.Model
{
    /// <summary>
    /// WhatsApp document content. Either \&quot;id\&quot; or \&quot;link\&quot; must be provided, but not both.
    /// </summary>
    [DataContract(Name = "WhatsAppDocument")]
    public partial class WhatsAppDocument : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppDocument" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the document file..</param>
        /// <param name="caption">Caption for the document..</param>
        /// <param name="mimeType">MIME type of the document file..</param>
        /// <param name="fileName">Name of the document file..</param>
        /// <param name="link">URL link to the document file..</param>
        public WhatsAppDocument(string id = default(string), string caption = default(string), string mimeType = default(string), string fileName = default(string), string link = default(string))
        {
            this.Id = id;
            this.Caption = caption;
            this.MimeType = mimeType;
            this.FileName = fileName;
            this.Link = link;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the document file.
        /// </summary>
        /// <value>Unique identifier for the document file.</value>
        /*
        <example>98765</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Caption for the document.
        /// </summary>
        /// <value>Caption for the document.</value>
        /*
        <example>Please review this document.</example>
        */
        [DataMember(Name = "caption", EmitDefaultValue = true)]
        public string Caption { get; set; }

        /// <summary>
        /// MIME type of the document file.
        /// </summary>
        /// <value>MIME type of the document file.</value>
        /*
        <example>application/pdf</example>
        */
        [DataMember(Name = "mime_type", EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Name of the document file.
        /// </summary>
        /// <value>Name of the document file.</value>
        /*
        <example>example.pdf</example>
        */
        [DataMember(Name = "file_name", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// URL link to the document file.
        /// </summary>
        /// <value>URL link to the document file.</value>
        /*
        <example>https://example.com/document.pdf</example>
        */
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsAppDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
